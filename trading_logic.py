import asyncio
from datetime import datetime
import pytz
import pandas as pd
import numpy as np
import pandas_ta as ta
from binance.async_client import AsyncClient
from binance.exceptions import BinanceAPIException
from binance import AsyncClient, BinanceSocketManager
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- C·∫§U H√åNH CH·ªà B√ÅO ---
TIMEFRAME_M15 = AsyncClient.KLINE_INTERVAL_15MINUTE
TIMEFRAME_H1 = AsyncClient.KLINE_INTERVAL_1HOUR
FRACTAL_PERIODS = 2
CVD_PERIOD = 24

# C·∫•u h√¨nh Stochastic
STOCH_K = 16
STOCH_SMOOTH_K = 16
STOCH_D = 8

# Bi·∫øn global
last_sent_signals = {}
klines_cache = {}
vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')

# --- K·∫æT N·ªêI V√Ä L·∫§Y D·ªÆ LI·ªÜU ---
async def get_klines(symbol, interval, limit=1500):
    client = None
    try:
        client = await AsyncClient.create()
        logger.info(f"L·∫•y {limit} n·∫øn cho {symbol} tr√™n khung {interval}")
        klines = None
        try:
            klines = await client.futures_klines(symbol=symbol, interval=interval, limit=limit)
        except BinanceAPIException as e:
            if e.code == -1121:
                logger.info(f"Fallback to spot klines for {symbol}")
                klines = await client.get_klines(symbol=symbol, interval=interval, limit=limit)
            else:
                raise e
        
        if klines is None:
            logger.error(f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu n·∫øn cho {symbol} tr√™n khung {interval}")
            raise ValueError("Could not retrieve klines from any market.")

        df = pd.DataFrame(klines, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume', 
            'close_time', 'quote_asset_volume', 'number_of_trades', 
            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
        ])
        
        logger.info(f"ƒê√£ l·∫•y {len(df)} n·∫øn cho {symbol}")
        for col in ['timestamp', 'open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col])
        return df
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu cho {symbol} tr√™n khung {interval}: {e}")
        return pd.DataFrame()
    finally:
        if client:
            await client.close_connection()

# --- LOGIC T√çNH TO√ÅN CH·ªà B√ÅO ---
def calculate_cvd_divergence(df):
    logger.info(f"T√≠nh CVD cho {symbol}: {len(df)} n·∫øn")
    if len(df) < 50 + FRACTAL_PERIODS:
        logger.warning(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho {symbol}: {len(df)} n·∫øn, c·∫ßn {50 + FRACTAL_PERIODS}")
        return None
    n = FRACTAL_PERIODS
    price_range = df['high'] - df['low']
    df['delta'] = np.where(price_range > 0, df['volume'] * (2 * df['close'] - df['low'] - df['high']) / price_range, 0)
    df['delta'] = df['delta'].fillna(0)
    
    df['cvd'] = ta.ema(df['delta'], length=CVD_PERIOD)
    df['ema50'] = ta.ema(df['close'], length=50)
    
    up_fractals = []
    down_fractals = []
    for i in range(n, len(df) - n):
        is_uptrend = df['close'].iloc[i - n] > df['ema50'].iloc[i - n]
        is_downtrend = df['close'].iloc[i - n] < df['ema50'].iloc[i - n]
        is_pivot_high = all(df['high'].iloc[i] >= df['high'].iloc[j] for j in range(i - n, i + n + 1) if j != i)
        is_pivot_low = all(df['low'].iloc[i] <= df['low'].iloc[j] for j in range(i - n, i + n + 1) if j != i)
        if is_pivot_high and is_uptrend:
            up_fractals.append(i)
        if is_pivot_low and is_downtrend:
            down_fractals.append(i)
    
    logger.info(f"{symbol}: T√¨m th·∫•y {len(up_fractals)} fractal ƒë·ªânh, {len(down_fractals)} fractal ƒë√°y")
    current_bar_index = len(df) - 1
    signal = None
    if len(up_fractals) >= 2:
        last_pivot_idx, prev_pivot_idx = up_fractals[-1], up_fractals[-2]
        if (current_bar_index - last_pivot_idx) < 30:
            High_Last_Price = df['high'].iloc[last_pivot_idx]
            High_Per_Price = df['high'].iloc[prev_pivot_idx]
            High_Last_Hist = df['cvd'].iloc[last_pivot_idx]
            High_Per_Hist = df['cvd'].iloc[prev_pivot_idx]
            logger.info(f"{symbol}: SHORT check - Price: {High_Last_Price} vs {High_Per_Price}, CVD: {High_Last_Hist} vs {High_Per_Hist}")
            if (High_Last_Price > High_Per_Price) and (High_Last_Hist < High_Per_Hist) and \
               (High_Last_Hist > 0 and High_Per_Hist > 0) and ((last_pivot_idx - prev_pivot_idx) < 30):
                signal = {'type': 'SHORT üìâ', 'price': df['close'].iloc[last_pivot_idx], 
                          'timestamp': df['timestamp'].iloc[last_pivot_idx],
                          'confirmation_timestamp': df['timestamp'].iloc[last_pivot_idx + n], 
                          'confirmation_price': df['close'].iloc[last_pivot_idx + n]}
    if len(down_fractals) >= 2:
        last_pivot_idx, prev_pivot_idx = down_fractals[-1], down_fractals[-2]
        if (current_bar_index - last_pivot_idx) < 30:
            Low_Last_Price = df['low'].iloc[last_pivot_idx]
            Low_Per_Price = df['low'].iloc[prev_pivot_idx]
            Low_Last_Hist = df['cvd'].iloc[last_pivot_idx]
            Low_Per_Hist = df['cvd'].iloc[prev_pivot_idx]
            logger.info(f"{symbol}: LONG check - Price: {Low_Last_Price} vs {Low_Per_Price}, CVD: {Low_Last_Hist} vs {Low_Per_Hist}")
            if (Low_Last_Price < Low_Per_Price) and (Low_Last_Hist > Low_Per_Hist) and \
               (Low_Last_Hist < 0 and Low_Per_Hist < 0) and ((last_pivot_idx - prev_pivot_idx) < 30):
                signal = {'type': 'LONG üìà', 'price': df['close'].iloc[last_pivot_idx], 
                          'timestamp': df['timestamp'].iloc[last_pivot_idx],
                          'confirmation_timestamp': df['timestamp'].iloc[last_pivot_idx + n], 
                          'confirmation_price': df['close'].iloc[last_pivot_idx + n]}
    if signal:
        logger.info(f"{symbol}: T√≠n hi·ªáu ƒë∆∞·ª£c t·∫°o: {signal}")
    else:
        logger.info(f"{symbol}: Kh√¥ng t·∫°o ƒë∆∞·ª£c t√≠n hi·ªáu ph√¢n k·ª≥ CVD")
    return signal

def calculate_stochastic(df):
    logger.info(f"T√≠nh Stochastic cho {len(df)} n·∫øn")
    if df.empty:
        logger.warning("Dataframe r·ªóng khi t√≠nh Stochastic")
        return None
    df_reset = df.reset_index(drop=True)
    stoch = df_reset.ta.stoch(k=STOCH_K, d=STOCH_D, smooth_k=STOCH_SMOOTH_K)
    if stoch is not None and not stoch.empty:
        stoch.index = df.index
        logger.info(f"Stochastic t√≠nh xong: gi√° tr·ªã m·ªõi nh·∫•t = {stoch.iloc[-1]}")
        return stoch[f'STOCHk_{STOCH_K}_{STOCH_D}_{STOCH_SMOOTH_K}']
    logger.warning("T√≠nh Stochastic th·∫•t b·∫°i")
    return None

# --- X·ª¨ L√ù D·ªÆ LI·ªÜU WEBSOCKET ---
async def process_kline_data(symbol, interval, kline, m15_data, h1_data):
    logger.info(f"Nh·∫≠n n·∫øn m·ªõi cho {symbol} tr√™n khung {interval} t·∫°i {datetime.fromtimestamp(kline['k']['t'] / 1000, vietnam_tz).strftime('%Y-%m-%d %H:%M:%S')}")
    kline_data = kline['k']
    if kline_data['x']:  # Ch·ªâ x·ª≠ l√Ω khi n·∫øn ƒë√≥ng
        new_candle = {
            'timestamp': kline_data['t'],
            'open': float(kline_data['o']),
            'high': float(kline_data['h']),
            'low': float(kline_data['l']),
            'close': float(kline_data['c']),
            'volume': float(kline_data['v']),
            'close_time': kline_data['T'],
            'quote_asset_volume': float(kline_data['q']),
            'number_of_trades': kline_data['n'],
            'taker_buy_base_asset_volume': float(kline_data['V']),
            'taker_buy_quote_asset_volume': float(kline_data['Q']),
            'ignore': 0
        }
        
        if interval == TIMEFRAME_M15:
            df = m15_data
        else:
            df = h1_data
        
        if df.empty:
            df = pd.DataFrame([new_candle])
        else:
            df = pd.concat([df, pd.DataFrame([new_candle])], ignore_index=True)
            df = df.tail(1500)  # Gi·ªØ t·ªëi ƒëa 1500 n·∫øn
        
        for col in ['timestamp', 'open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col])
        
        if interval == TIMEFRAME_M15:
            klines_cache[symbol]['m15'] = df
        else:
            klines_cache[symbol]['h1'] = df
        logger.info(f"C·∫≠p nh·∫≠t cache cho {symbol}: M15={len(klines_cache[symbol]['m15'])}, H1={len(klines_cache[symbol]['h1'])}")
        logger.info(f"--- K·∫øt th√∫c x·ª≠ l√Ω n·∫øn cho {symbol} ---")

# --- B·ªò M√ÅY QU√âT T√çN HI·ªÜU LI√äN T·ª§C ---
async def run_signal_checker(bot):
    logger.info(f"üöÄ Signal checker is running with WebSocket t·∫°i {datetime.now(vietnam_tz).strftime('%Y-%m-%d %H:%M:%S %Z')}")
    from bot_handler import get_watchlist_from_db, send_formatted_signal
    
    # Kh·ªüi t·∫°o BinanceSocketManager
    client = await AsyncClient.create()
    bsm = BinanceSocketManager(client)
    
    # L·∫•y watchlist
    watchlist = await get_watchlist_from_db()
    if not watchlist:
        logger.warning("Watchlist r·ªóng. ƒê·ª£i c·∫≠p nh·∫≠t watchlist...")
        await client.close_connection()
        return
    
    # Kh·ªüi t·∫°o cache cho m·ªói symbol
    for symbol in watchlist:
        klines_cache[symbol] = {'m15': pd.DataFrame(), 'h1': pd.DataFrame()}
        m15_data, h1_data = await asyncio.gather(
            get_klines(symbol, TIMEFRAME_M15),
            get_klines(symbol, TIMEFRAME_H1)
        )
        klines_cache[symbol]['m15'] = m15_data
        klines_cache[symbol]['h1'] = h1_data
    
    # T·∫°o WebSocket cho m·ªói symbol v√† timeframe
    async def handle_kline_socket(symbol, interval):
        while True:
            try:
                async with bsm.kline_futures_socket(symbol=symbol.lower(), interval=interval) as kline_socket:
                    while True:
                        kline = await kline_socket.recv()
                        await process_kline_data(symbol, interval, kline, klines_cache[symbol]['m15'], klines_cache[symbol]['h1'])
                        
                        # Ch·ªâ ki·ªÉm tra t√≠n hi·ªáu khi n·∫øn M15 ƒë√≥ng
                        if interval == TIMEFRAME_M15 and kline['k']['x']:
                            m15_data = klines_cache[symbol]['m15'].copy()
                            h1_data = klines_cache[symbol]['h1'].copy()
                            
                            if m15_data.empty or h1_data.empty:
                                logger.warning(f"D·ªØ li·ªáu r·ªóng cho {symbol}: M15={len(m15_data)}, H1={len(h1_data)}")
                                continue
                            
                            m15_data.set_index('timestamp', inplace=True)
                            h1_data.set_index('timestamp', inplace=True)
                            
                            cvd_signal_m15 = calculate_cvd_divergence(m15_data.copy().reset_index())
                            if not cvd_signal_m15:
                                logger.info(f"Kh√¥ng c√≥ t√≠n hi·ªáu CVD cho {symbol}")
                                logger.info(f"--- K·∫øt th√∫c x·ª≠ l√Ω t√≠n hi·ªáu cho {symbol} ---")
                                continue
                            
                            stoch_m15_series = calculate_stochastic(m15_data)
                            stoch_h1_series = calculate_stochastic(h1_data)
                            if stoch_m15_series is None or stoch_h1_series is None:
                                logger.warning(f"Thi·∫øu Stochastic cho {symbol}: M15={stoch_m15_series is None}, H1={stoch_h1_series is None}")
                                logger.info(f"--- K·∫øt th√∫c x·ª≠ l√Ω t√≠n hi·ªáu cho {symbol} ---")
                                continue
                            
                            confirmation_ts = pd.to_datetime(cvd_signal_m15['confirmation_timestamp'], unit='ms')
                            
                            try:
                                stoch_m15 = stoch_m15_series.loc[confirmation_ts]
                            except KeyError:
                                stoch_m15_series = stoch_m15_series.sort_index()
                                stoch_m15 = stoch_m15_series[stoch_m15_series.index <= confirmation_ts].iloc[-1] if not stoch_m15_series[stoch_m15_series.index <= confirmation_ts].empty else None
                                logger.warning(f"Kh√¥ng t√¨m th·∫•y timestamp Stochastic M15 {confirmation_ts} cho {symbol}, d√πng gi√° tr·ªã g·∫ßn nh·∫•t: {stoch_m15}")
                            
                            try:
                                stoch_h1_latest_before = stoch_h1_series[h1_data.index <= confirmation_ts]
                                stoch_h1 = stoch_h1_latest_before.iloc[-1] if not stoch_h1_latest_before.empty else None
                            except KeyError:
                                logger.warning(f"Kh√¥ng t√¨m th·∫•y timestamp Stochastic H1 {confirmation_ts} cho {symbol}")
                                stoch_h1 = None
                            
                            if stoch_m15 is None or stoch_h1 is None:
                                logger.warning(f"Kh√¥ng c√≥ Stochastic h·ª£p l·ªá cho {symbol}: M15={stoch_m15}, H1={stoch_h1}")
                                logger.info(f"--- K·∫øt th√∫c x·ª≠ l√Ω t√≠n hi·ªáu cho {symbol} ---")
                                continue
                            
                            logger.info(f"{symbol}: Gi√° tr·ªã Stochastic: M15={stoch_m15}, H1={stoch_h1} t·∫°i {confirmation_ts}")
                            
                            final_signal_message = None
                            base_signal = {**cvd_signal_m15, 'symbol': symbol, 'timeframe': 'M15', 'stoch_m15': stoch_m15, 'stoch_h1': stoch_h1}
                            if cvd_signal_m15['type'] == 'LONG üìà' and stoch_m15 < 20:
                                if stoch_h1 > 25:
                                    final_signal_message = {**base_signal, 'win_rate': '60%'}
                                elif stoch_h1 < 25:
                                    final_signal_message = {**base_signal, 'win_rate': '80%'}
                            elif cvd_signal_m15['type'] == 'SHORT üìâ' and stoch_m15 > 80:
                                if stoch_h1 < 75:
                                    final_signal_message = {**base_signal, 'win_rate': '60%'}
                                elif stoch_h1 > 75:
                                    final_signal_message = {**base_signal, 'win_rate': '80%'}
                            
                            if final_signal_message:
                                logger.info(f"T√≠n hi·ªáu cu·ªëi c√πng cho {symbol}: {final_signal_message}")
                                signal_timestamp = final_signal_message['timestamp']
                                if last_sent_signals.get(symbol) != signal_timestamp:
                                    await send_formatted_signal(bot, final_signal_message)
                                    last_sent_signals[symbol] = signal_timestamp
                                    logger.info(f"‚úÖ ƒê√£ g·ª≠i t√≠n hi·ªáu cho {symbol} l√™n channel t·∫°i {datetime.now(vietnam_tz).strftime('%Y-%m-%d %H:%M:%S')}")
                                else:
                                    logger.info(f"T√≠n hi·ªáu tr√πng l·∫∑p cho {symbol}. B·ªè qua.")
                            else:
                                logger.info(f"Kh√¥ng t·∫°o t√≠n hi·ªáu cu·ªëi c√πng cho {symbol} sau khi ki·ªÉm tra Stochastic")
                            logger.info(f"--- K·∫øt th√∫c x·ª≠ l√Ω t√≠n hi·ªáu cho {symbol} ---")
                        await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"WebSocket ng·∫Øt k·∫øt n·ªëi cho {symbol} ({interval}): {e}. Reconnect sau 5s...")
                await asyncio.sleep(5)
    
    # Kh·ªüi ch·∫°y WebSocket cho t·∫•t c·∫£ symbol v√† timeframe
    tasks = []
    for symbol in watchlist:
        tasks.append(handle_kline_socket(symbol, TIMEFRAME_M15))
        tasks.append(handle_kline_socket(symbol, TIMEFRAME_H1))
    
    try:
        await asyncio.gather(*tasks)
    except Exception as e:
        logger.error(f"L·ªói trong WebSocket loop: {e}")
    finally:
        await client.close_connection()