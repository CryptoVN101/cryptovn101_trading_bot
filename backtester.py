# backtester.py
import asyncio
from datetime import datetime
import pytz
from trading_logic import (
    get_klines, 
    calculate_cvd_divergence, 
    calculate_stochastic,
    TIMEFRAME_M15,
    TIMEFRAME_H1
)
import pandas as pd

async def run_backtest(symbol='BTCUSDT', candles_to_check=1000):
    """
    Ch·∫°y backtest tr√™n d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ ki·ªÉm tra logic t√≠n hi·ªáu.
    """
    print(f"--- B·∫Øt ƒë·∫ßu Backtest cho m√£ {symbol} ---")
    print(f"ƒêang t·∫£i {candles_to_check} n·∫øn l·ªãch s·ª≠ M15 v√† H1...")

    try:
        m15_data_full, h1_data_full = await asyncio.gather(
            get_klines(symbol, TIMEFRAME_M15, limit=candles_to_check),
            get_klines(symbol, TIMEFRAME_H1, limit=candles_to_check)
        )
    except Exception as e:
        print(f"L·ªói khi t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu: {e}")
        return

    if m15_data_full.empty or h1_data_full.empty:
        print("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")
        return

    print("ƒê√£ t·∫£i d·ªØ li·ªáu xong. B·∫Øt ƒë·∫ßu qu√©t t√≠n hi·ªáu...")
    found_signals = 0
    last_signal_timestamp = None # BI·∫æN M·ªöI: D√πng ƒë·ªÉ tr√°nh t√≠n hi·ªáu tr√πng l·∫∑p

    for i in range(100, len(m15_data_full)):
        current_m15_data = m15_data_full.iloc[:i]
        current_timestamp = current_m15_data.iloc[-1]['timestamp']
        current_h1_data = h1_data_full[h1_data_full['timestamp'] <= current_timestamp]

        if current_h1_data.empty:
            continue
        
        cvd_signal = calculate_cvd_divergence(current_m15_data)
        if not cvd_signal:
            continue

        # S·ª¨A L·ªñI: Ch·ªâ x·ª≠ l√Ω n·∫øu ƒë√¢y l√† m·ªôt t√≠n hi·ªáu m·ªõi
        if cvd_signal['timestamp'] == last_signal_timestamp:
            continue

        stoch_m15 = calculate_stochastic(current_m15_data)
        stoch_h1 = calculate_stochastic(current_h1_data)

        if stoch_m15 is None or stoch_h1 is None:
            continue

        final_signal_message = None

        if cvd_signal['type'] == 'LONG üìà':
            if stoch_m15 < 25 and stoch_h1 > 25:
                final_signal_message = {**cvd_signal, 'win_rate': 'Trung b√¨nh'}
            elif stoch_m15 < 25 and stoch_h1 < 25:
                final_signal_message = {**cvd_signal, 'win_rate': 'Cao'}
        
        elif cvd_signal['type'] == 'SHORT üìâ':
            if stoch_m15 > 75 and stoch_h1 < 75:
                final_signal_message = {**cvd_signal, 'win_rate': 'Trung b√¨nh'}
            elif stoch_m15 > 75 and stoch_h1 > 75:
                final_signal_message = {**cvd_signal, 'win_rate': 'Cao'}

        if final_signal_message:
            found_signals += 1
            last_signal_timestamp = final_signal_message.get('timestamp') # C·∫≠p nh·∫≠t timestamp c·ªßa t√≠n hi·ªáu cu·ªëi
            
            timestamp_ms = final_signal_message.get('timestamp')
            utc_time = datetime.fromtimestamp(timestamp_ms / 1000, tz=pytz.utc)
            vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            vietnam_time = utc_time.astimezone(vietnam_tz)
            time_str = vietnam_time.strftime('%Y-%m-%d %H:%M:%S')

            print("\n==================================================")
            print("üî• T√çN HI·ªÜU ƒê∆Ø·ª¢C T√åM TH·∫§Y üî•")
            # C·∫¨P NH·∫¨T: Th√™m t√™n m√£ coin
            print(f"    M√£ Coin: {symbol}")
            print(f"    Th·ªùi gian: {time_str} (Gi·ªù Vi·ªát Nam)")
            print(f"    Lo·∫°i: {final_signal_message['type']}")
            print(f"    Gi√°: {final_signal_message['price']:.2f}")
            print(f"    T·ªâ l·ªá: {final_signal_message['win_rate']}")
            print(f"    Stoch M15: {stoch_m15:.2f} | Stoch H1: {stoch_h1:.2f}")
            print("==================================================")

    if found_signals == 0:
        print(f"\n--- Ho√†n t·∫•t Backtest cho {symbol}. Kh√¥ng t√¨m th·∫•y t√≠n hi·ªáu n√†o. ---")
    else:
        print(f"\n--- Ho√†n t·∫•t Backtest cho {symbol}. ƒê√£ t√¨m th·∫•y t·ªïng c·ªông {found_signals} t√≠n hi·ªáu. ---")


if __name__ == '__main__':
    # B·∫°n c√≥ th·ªÉ ƒë·ªïi m√£ coin ·ªü ƒë√¢y ƒë·ªÉ test
    asyncio.run(run_backtest(symbol='ETHUSDT'))

